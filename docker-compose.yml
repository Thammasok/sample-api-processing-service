version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:17-alpine
    container_name: sample-api-postgres
    environment:
      POSTGRES_DB: sample_db
      POSTGRES_USER: postgresql
      POSTGRES_PASSWORD: postgresql123
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    networks:
      - sample-api-network
    restart: unless-stopped
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U postgres -d sample_api_db']
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:8-alpine
    container_name: sample-api-redis
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - sample-api-network
    restart: unless-stopped
    command: redis-server --appendonly yes
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 5

  # Express.js Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: sample-api-backend
    environment:
      NODE_ENV: development
      PORT: 3000
      # Database Configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: sample_api_db
      DB_USER: postgres
      DB_PASSWORD: postgres123
      # Redis Configuration
      REDIS_HOST: redis
      REDIS_PORT: 6379
      # API Configuration
      API_VERSION: v1
    ports:
      - '3000:3000'
    volumes:
      - .:/app
      - /app/node_modules
    networks:
      - sample-api-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    restart: unless-stopped
    command: npm run dev

  # Optional: Redis Commander (Redis GUI)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: sample-api-redis-commander
    environment:
      REDIS_HOSTS: local:redis:6379
    ports:
      - '8081:8081'
    networks:
      - sample-api-network
    depends_on:
      - redis
    profiles:
      - tools

  # Optional: pgAdmin (PostgreSQL GUI)
  pgadmin:
    image: dpage/pgadmin4:latest
    container_name: sample-api-pgadmin
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@example.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    ports:
      - '8080:80'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    networks:
      - sample-api-network
    depends_on:
      - postgres
    profiles:
      - tools

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  pgadmin_data:
    driver: local

# Custom network
networks:
  sample-api-network:
    driver: bridge
